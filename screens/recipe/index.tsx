import Link from 'next/link'
import React, { Fragment, useMemo } from 'react'
import striptags from 'striptags'

import BottomBar from '../../components/bottom_bar'
import { cardCategory } from '../../components/card/card.css'
import FAQs from '../../components/faq'
import { useWindowSize } from '../../components/hooks/use_window_size'
import RecipeCard from '../../components/recipe_card'
import { SEO } from '../../components/SEO'
import { BREAKPOINTS } from '../../styles/vars.css'
import { SiteMeta } from '../../utils/config'
import { ICompleteRecipe } from '../../utils/types'
import {
  FAQSection,
  featuredImageContainer,
  featuredImageSquareContainer,
  recipeCategories,
  recipeContainer,
  recipePost,
} from './recipe.css'

type RecipePageProps = {
  recipe: ICompleteRecipe
  isAI?: boolean
}

function RecipePage(props: RecipePageProps) {
  const { recipe, isAI = false } = props
  const { width } = useWindowSize()

  const categories = [
    ...(recipe.post.recipeCuisines?.nodes ?? []),
    ...(recipe.post.recipeCourses?.nodes ?? []),
  ]

  const recipeExists = useMemo(
    () => (recipe.content ? true : false),
    [recipe.content]
  )
  const faqExists = useMemo(() => recipe.faqs.length > 0, [recipe.faqs])

  const mediumImageSet =
    recipe.post.featuredImage?.node?.mediaDetails?.sizes?.filter(
      (size) => size?.name === 'thumbnail'
    )
  const mediumImage =
    mediumImageSet && mediumImageSet.length > 0
      ? mediumImageSet[0]?.sourceUrl ?? ''
      : ''

  return (
    <div id={`recipe ${recipeContainer}`}>
      <SEO
        title={`${recipe.post.title as string} | ${SiteMeta.titleSuffix}`}
        description={striptags(recipe.post.excerpt as string)}
        image={recipe.post.featuredImage?.node?.mediaItemUrl as string}
        isArticle={true}
        url=""
        schemas={[
          {
            type: 'recipe',
            schema: recipe.recipeSchema || '',
          },
          {
            type: 'FAQ',
            schema: recipe.faqSchema ?? '',
          },
        ]}
      />
      <div id="recipe-post" className={`recipe-post ${recipePost}`}>
        <div className="recipe__postHeader">
          <h1
            style={{ lineHeight: '3rem' }}
            dangerouslySetInnerHTML={{
              __html: recipe.post.title as string,
            }}
          ></h1>
          <div className={`recipe__categories ${recipeCategories}`}>
            {categories.map((cat, idx) => {
              return (
                <Fragment key={cat?.slug}>
                  {idx > 0 ? (
                    <span className="card__category--saperator">/</span>
                  ) : null}
                  <span
                    className={`card__category ${cardCategory}`}
                    key={cat?.uri}
                  >
                    <Link prefetch={false} href={cat?.uri as string}>
                      {cat?.name}
                    </Link>
                  </span>
                </Fragment>
              )
            })}
          </div>
        </div>
        {isAI && (
          <blockquote>
            <span>
              Disclaimer : This recipe has been generated by an AI, In case you
              feel that recipe is inaccurate. Reach us
            </span>
            <span>
              <a
                target="_blank"
                href={`mailto:jtn.kathuria@gmail.com?subject=Issue with AI recipe [${
                  recipe.post.databaseId
                }] ${recipe.post.title ?? ''}`}
                rel="noreferrer"
              >
                {' '}
                here
              </a>
            </span>
            <span>.</span>
          </blockquote>
        )}
        <div
          className={`${
            isAI ? featuredImageSquareContainer : featuredImageContainer
          }`}
        >
          <img
            alt={`${
              recipe.post.featuredImage?.node?.altText ??
              recipe.post.title ??
              ''
            }`}
            style={{
              position: 'absolute',
              width: '100%',
              height: '100%',
              objectFit: 'cover',
            }}
            sizes={recipe.post.featuredImage?.node?.sizes as string}
            src={recipe.post.featuredImage?.node?.sourceUrl as string}
            srcSet={recipe.post.featuredImage?.node?.srcSet as string}
          />
        </div>
        {recipe.post.content && recipe.post.content.length > 0 ? (
          <article
            id="article"
            dangerouslySetInnerHTML={{
              __html: recipe.post.content,
            }}
          ></article>
        ) : (
          <div style={{ height: '3rem' }}></div>
        )}
        {recipeExists ? (
          <div id="recipe-card" className="recipe__card">
            <RecipeCard recipe={recipe.content} recipePost={recipe.post} />
          </div>
        ) : null}
      </div>
      {faqExists ? (
        <div className={`${FAQSection}`}>
          <FAQs faqs={recipe.faqs} />
        </div>
      ) : null}

      {width < BREAKPOINTS.desktop.min ? (
        <BottomBar recipe={recipeExists} faq={faqExists} />
      ) : null}
    </div>
  )
}

export default RecipePage
